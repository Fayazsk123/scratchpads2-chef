vcl 4.0;
import directors;
import std;
acl trusted_network {
<% node['scratchpads']['varnish']['trusted_networks'].each do |trusted_network| -%>
  <%= trusted_network %>;
<% end -%>
}
backend control {
  .host = "<%= node['scratchpads']['varnish']['control']['host'] %>";
  .port = "<%= node['scratchpads']['varnish']['control']['port'] %>";
  .first_byte_timeout = <%= node['scratchpads']['varnish']['first_byte_timeout'] %>;
  .between_bytes_timeout = <%= node['scratchpads']['varnish']['between_bytes_timeout'] %>;
  .connect_timeout = <%= node['scratchpads']['varnish']['connect_timeout'] %>;
  .max_connections = <%= node['scratchpads']['varnish']['control']['max_connections'] %>;
  .probe = {
    .url = "<%= node['scratchpads']['varnish']['probe']['url'] %>";
    .timeout = <%= node['scratchpads']['varnish']['probe']['timeout'] %>;
    .interval = <%= node['scratchpads']['varnish']['probe']['interval'] %>;
    .window = <%= node['scratchpads']['varnish']['probe']['window'] %>;
    .threshold = <%= node['scratchpads']['varnish']['probe']['threshold'] %>;
  }
}
<% @sp_app_servers.each_with_index do |app_server, n| -%>
backend sp_app_<%= n+1 %> {
  .host = "<%= app_server['fqdn'] %>";
  .port = "<%= node['scratchpads']['varnish']['sp_app_server_port'] %>";
  .first_byte_timeout = <%= node['scratchpads']['varnish']['first_byte_timeout'] %>;
  .between_bytes_timeout = <%= node['scratchpads']['varnish']['between_bytes_timeout'] %>;
  .connect_timeout = <%= node['scratchpads']['varnish']['connect_timeout'] %>;
  .probe = {
    .url = "<%= node['scratchpads']['varnish']['probe']['url'] %>";
    .timeout = <%= node['scratchpads']['varnish']['probe']['timeout'] %>;
    .interval = <%= node['scratchpads']['varnish']['probe']['interval'] %>;
    .window = <%= node['scratchpads']['varnish']['probe']['window'] %>;
    .threshold = <%= node['scratchpads']['varnish']['probe']['threshold'] %>;
  }
}
<% end -%>
<% @sp_search_master_servers.each_with_index do |search_server, n| -%>
backend sp_search_master_<%= n+1 %> {
  .host = "<%= search_server['fqdn'] %>";
  .port = "<%= node['scratchpads']['solr-undertow']['port'] %>";
  .first_byte_timeout = <%= node['scratchpads']['varnish']['first_byte_timeout'] %>;
  .between_bytes_timeout = <%= node['scratchpads']['varnish']['between_bytes_timeout'] %>;
  .connect_timeout = <%= node['scratchpads']['varnish']['connect_timeout'] %>;
  .probe = {
    .url = "/solr/";
    .timeout = <%= node['scratchpads']['varnish']['probe']['timeout'] %>;
    .interval = <%= node['scratchpads']['varnish']['probe']['interval'] %>;
    .window = <%= node['scratchpads']['varnish']['probe']['window'] %>;
    .threshold = <%= node['scratchpads']['varnish']['probe']['threshold'] %>;
  }
}
<% end -%>
<% @sp_search_slave_servers.each_with_index do |search_server, n| -%>
backend sp_search_slave_<%= n+1 %> {
  .host = "<%= search_server['fqdn'] %>";
  .port = "<%= node['scratchpads']['solr-undertow']['port'] %>";
  .first_byte_timeout = <%= node['scratchpads']['varnish']['first_byte_timeout'] %>;
  .between_bytes_timeout = <%= node['scratchpads']['varnish']['between_bytes_timeout'] %>;
  .connect_timeout = <%= node['scratchpads']['varnish']['connect_timeout'] %>;
  .probe = {
    .url = "/solr/";
    .timeout = <%= node['scratchpads']['varnish']['probe']['timeout'] %>;
    .interval = <%= node['scratchpads']['varnish']['probe']['interval'] %>;
    .window = <%= node['scratchpads']['varnish']['probe']['window'] %>;
    .threshold = <%= node['scratchpads']['varnish']['probe']['threshold'] %>;
  }
}
<% end -%>
backend selenium {
  .host = "<%= node['scratchpads']['varnish']['selenium']['host'] %>";
  .port = "<%= node['scratchpads']['varnish']['selenium']['port'] %>";
  .first_byte_timeout = <%= node['scratchpads']['varnish']['first_byte_timeout'] %>;
  .between_bytes_timeout = <%= node['scratchpads']['varnish']['between_bytes_timeout'] %>;
  .connect_timeout = <%= node['scratchpads']['varnish']['connect_timeout'] %>;
  .max_connections = <%= node['scratchpads']['varnish']['selenium']['max_connections'] %>;
}
backend redmine {
  .host = "<%= node['scratchpads']['varnish']['redmine']['host'] %>";
  .port = "<%= node['scratchpads']['varnish']['redmine']['port'] %>";
  .first_byte_timeout = <%= node['scratchpads']['varnish']['first_byte_timeout'] %>;
  .between_bytes_timeout = <%= node['scratchpads']['varnish']['between_bytes_timeout'] %>;
  .connect_timeout = <%= node['scratchpads']['varnish']['connect_timeout'] %>;
  .max_connections = <%= node['scratchpads']['varnish']['redmine']['max_connections'] %>;
}
backend monit {
  .host = "<%= node['scratchpads']['varnish']['monit']['host'] %>";
  .port = "<%= node['scratchpads']['varnish']['monit']['port'] %>";
  .first_byte_timeout = <%= node['scratchpads']['varnish']['first_byte_timeout'] %>;
  .between_bytes_timeout = <%= node['scratchpads']['varnish']['between_bytes_timeout'] %>;
  .connect_timeout = <%= node['scratchpads']['varnish']['connect_timeout'] %>;
  .max_connections = <%= node['scratchpads']['varnish']['monit']['max_connections'] %>;
}
sub set_control_domains{
<%
  domains = []
  node['scratchpads']['varnish']['control']['domains'].each do|domain|
    domains << 'req.http.host ~ "^'+domain+'$"'
  end
%>
  if(<%= domains.join(' || ') %>){
    set req.backend_hint = control;
  }
}
sub set_selenium_domains{
<%
  domains = []
  node['scratchpads']['varnish']['selenium']['domains'].each do|domain|
    domains << 'req.http.host ~ "^'+domain+'$"'
  end
%>
  if(<%= domains.join(' || ') %>){
    # Absolutely NO CACHING for the qa.scratchpads.eu site
    set req.backend_hint = selenium;
    return (pipe);
  }
}
sub set_monit_domains{
<%
  domains = []
  node['scratchpads']['varnish']['monit']['domains'].each do|domain|
    domains << 'req.http.host ~ "^'+domain+'$"'
  end
%>
  if(<%= domains.join(' || ') %>){
    set req.backend_hint = monit;
    return (pass);
  }
}
sub set_redmine_domains{
<%
  domains = []
  node['scratchpads']['varnish']['redmine']['domains'].each do|domain|
    domains << 'req.http.host ~ "^'+domain+'$"'
  end
%>
  if(<%= domains.join(' || ') %>){
    set req.backend_hint = redmine;
  }
}
sub set_no_cache_domains{
<%
  domains = []
  node['scratchpads']['varnish']['no_cache_domains'].each do|domain|
    domains << 'req.http.host ~ "^'+domain+'$"'
  end
%>
  if(<%= domains.join(' || ') %>){
    if (req.http.x-forwarded-for) {
      set req.http.X-Forwarded-For = req.http.X-Forwarded-For + ", " + client.ip;
    } else {
      set req.http.X-Forwarded-For = client.ip;
    }
    return (pipe);
  }
}
sub vcl_init {
  new random_backend = directors.random();
  new random_search_slaves = directors.random();
  new random_search_masters = directors.random();
<% @sp_app_servers.each_with_index do |app_server, n| -%>
  random_backend.add_backend(sp_app_<%= n+1 %>, 100);
<% end -%>
<% @sp_search_slave_servers.each_with_index do |search_server, n| -%>
  random_search_slaves.add_backend(sp_search_slave_<%= n+1 %>, 100);
<% end -%>
<% @sp_search_master_servers.each_with_index do |search_server, n| -%>
  random_search_masters.add_backend(sp_search_master_<%= n+1 %>, 100);
<% end -%>
}
sub vcl_recv {
<%
  domains = []
  node['scratchpads']['varnish']['trusted_network_only_domain_paterns'].each do|domain|
    domains << 'req.http.host ~ "'+domain+'"'
  end
  node['scratchpads']['varnish']['search']['domains'].each do|domain|
    domains << 'req.http.host ~ "^'+domain+'$"'
  end
%>
  # Redirect dev. and dev- domains if outside the museum
  if(client.ip !~ trusted_network && ( <%= domains.join(' || ') %> ) ){
    return (synth(750, "http://scratchpads.eu/"));
  }

  # Default to the random_backend backend.
  set req.backend_hint = random_backend.backend();
  # Override the default for specific domains.
  call set_control_domains;
  call set_redmine_domains;
  call set_monit_domains;
  call set_selenium_domains;
  call set_no_cache_domains;
  # Set the backen for server-status and xhprof
<% @sp_app_servers.each_with_index do |app_server, n| -%>
  if(req.http.host ~ "<%= app_server['fqdn'] %>$"){
    set req.backend_hint = sp_app_<%= n+1 %>;
  }
<% end -%>
  # Set the search domains
<%
  domains = []
  node['scratchpads']['varnish']['search']['domains'].each do|domain|
    domains << 'req.http.host ~ "^'+domain+'$"'
  end
%>
  if(<%= domains.join(' || ') %>){
    if(req.method == "GET"){
      set req.backend_hint = random_search_slaves.backend();
    }else{
      set req.backend_hint = random_search_masters.backend();
    }
  }

  # Prevent caching of large files (>10MB)
  if (req.http.x-pipe && req.restarts > 0) {
    unset req.http.x-pipe;
    return (pipe);
  } 

  if (req.restarts == 0) {
    if (req.http.x-forwarded-for) {
      set req.http.X-Forwarded-For = req.http.X-Forwarded-For + ", " + client.ip;
    } else {
      set req.http.X-Forwarded-For = client.ip;
    }
  }

  # Set the grace header which is overridden later.
  set req.http.grace = "none";


  # Allow PURGE from the acl purge (defined at the top of this file)
  if (req.method == "PURGE") {
    if (!client.ip ~ trusted_network) {
      return (synth(405, "Not allowed."));
    }
    return (hash);
  }

  # Get rid of progress.js query params
  if (req.url ~ "^/misc/progress\.js\?[0-9]+$") {
    set req.url = "/misc/progress.js";
  }

  # We only deal with GET and HEAD
  if (req.method != "GET" && req.method != "HEAD") {
      return (pass);
  }

  # Do not cache these paths.
<%
  paths = []
  node['scratchpads']['varnish']['no_cache_paths'].each do|path|
    paths << 'req.url ~ "'+path+'"'
  end
%>
  if (<%= paths.join(' || ') %>) {
    return (pass);
  }

  # Handle compression correctly. Different browsers send different
  # "Accept-Encoding" headers, even though they mostly all support the same
  # compression mechanisms. By consolidating these compression headers into
  # a consistent format, we can reduce the size of the cache and get more hits.=
  # @see: http:// varnish.projects.linpro.no/wiki/FAQ/Compression
  if (req.http.Accept-Encoding) {
    if (req.http.Accept-Encoding ~ "gzip") {
      # If the browser supports it, we will use gzip.
      set req.http.Accept-Encoding = "gzip";
    }
    else if (req.http.Accept-Encoding ~ "deflate") {
      # Next, try deflate if it is supported.
      set req.http.Accept-Encoding = "deflate";
    }
    else {
      # Unknown algorithm. Remove it and send unencoded.
      unset req.http.Accept-Encoding;
    }
  }

  # Always cache the following file types for all users.
  if (  req.url ~ "(?i)\.(png|gif|jpeg|jpg|ico|swf|css|js|html|htm)(\?[a-z0-9]+)?$" &&
    req.url !~ "system" && 
    req.url !~ "/journals/edit/[0-9]+.js") {
    unset req.http.Cookie;
  }

  # Remove all cookies that Drupal/Redmine/Mediawiki does not need to know about.
  # ANY remaining cookie will cause the request to pass-through to a backend.
  # For the most part we always set the NO_CACHE cookie after any POST request,
  # disabling the Varnish cache temporarily. The session cookie allows all authenticated
  # users to pass through as long as they are logged in.
  #
  # 1. Append a semi-colon to the front of the cookie string.
  # 2. Remove all spaces that appear after semi-colons.
  # 3. Match the cookies we want to keep, adding the space we removed
  #    previously, back. (\1) is first matching group in the regsuball.
  # 4. Remove all other cookies, identifying them by the fact that they have
  #    no space after the preceding semi-colon.
  # 5. Remove all spaces and semi-colons from the beginning and end of the
  #    cookie string.
  if (req.http.Cookie) {
    # Store the cookie, so that we can restore it later.
    set req.http.X-OriginalCookie = req.http.Cookie;
    set req.http.Cookie = ";" + req.http.Cookie;
    set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
    set req.http.Cookie = regsuball(req.http.Cookie, ";(S{1,2}ESS[a-z0-9]+|NO_CACHE|[a-z0-9\-]+_session|_redmine_session|mw_installer_session)=", "; \1=");
    set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
    set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");
    if (req.http.Cookie == "") {
      # If there are no remaining cookies, remove the cookie header. If there
      # are not any cookie headers, Varnish default behavior will be to cache
      # the page.
      unset req.http.Cookie;
      unset req.http.X-OriginalCookie;
    } else {
      # If there is any cookies left (a session or NO_CACHE cookie), do not
      # cache the page. Pass it on to Apache directly.
      set req.http.Cookie = req.http.X-OriginalCookie;
      unset req.http.X-OriginalCookie;
      return (pass);
    }
  }

  ## Unset Authorization header if it has the correct details...
  if (req.http.Authorization || req.http.Cookie) {
      /* Not cacheable by default */
      return (pass);
  }
}

sub vcl_deliver {
  set resp.http.grace = req.http.grace;
}

sub vcl_hit {
  if (obj.ttl >= 0s) {
    # normal hit
    return (deliver);
  }
  # We have no fresh fish. Lets look at the stale ones.
  if (std.healthy(req.backend_hint)) {
    # Backend is healthy. Limit age to 10s.
    if (obj.ttl + 10s > 0s) {
      set req.http.grace = "normal(limited)";
      return (deliver);
    } else {
      # No candidate for grace. Fetch a fresh object.
      return(fetch);
   }
  } else {
    # backend is sick - use full grace
    if (obj.ttl + obj.grace > 0s) {
      set req.http.grace = "full";
      return (deliver);
    } else {
     # no graced object.
    return (fetch);
   }
  }
}

sub vcl_backend_response {
  # do not cache files larger than 10MB
  if (beresp.http.Content-Length ~ "[0-9]{8,}" ) {
    set beresp.http.x-pipe = "1";
    return (retry);
  }
  # Prevent ports from appearing in the response.
  if (beresp.status == 301 || beresp.status == 302){
    set beresp.http.Location = regsub(beresp.http.Location,"^(\w+://[^/]+):\d+", "\1");
  }
  # Do not allow static files to set cookies.
  if (bereq.url ~ "(?i)\.(png|gif|jpeg|jpg|ico|swf|css|js|html|htm)(\?[a-z0-9]+)?$") {
    unset beresp.http.set-cookie;
  }
  # Allow items to be stale if needed.
  set beresp.ttl = 10s;
  set beresp.grace = 6h;
}

# In the event of an error, show friendlier messages.
sub vcl_backend_error {
  # Hacky redirect 
  if(beresp.status == 750){
    set beresp.http.Location = beresp.reason;
    set beresp.status = 302;
    return (deliver);
  }
  # Friendly error!
  set beresp.http.Content-Type = "text/html; charset=utf-8";
  set beresp.http.Retry-After = "5";
  synthetic({"<%= node['scratchpads']['varnish']['error_message'] %>"});
  return (deliver);
}
